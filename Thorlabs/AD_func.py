#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 12 17:35:47 2023

@author: joakimpihl
"""

##########
# This script contains various functions related to 




import time
import numpy as np
import sys
sys.path.append('C:/Program Files (x86)/Digilent/WaveFormsSDK/samples/py')
#sys.path.append('/Applications/WaveForms.app/Contents/Resources/SDK/samples/py')
from ctypes import *
from dwfconstants import *



### Function for connecting to the analog discovery

def Connect():
    """
    This function connects to the Analog discovery.

    Returns
    -------
    None.

    """
    #Defines global variable (dwf, hdwf) which can be used outside the function
    global dwf 
    global hdwf
    global channel
    # Checks if the system is windows (win) or Mac os (darwin) and then find path to dwf: /Library/Frameworks/dwf.framework/dwf
    if sys.platform.startswith("win"):
        dwf = cdll.dwf
    elif sys.platform.startswith("darwin"): 
        dwf = cdll.LoadLibrary("/Applications/WaveForms.app/Contents/Frameworks/dwf.framework/dwf")

    hdwf = c_int()
    channel = c_int(0)
    
    # Prevent temperature drift - Specifies Analog discovery behavior upon closure of the program
    dwf.FDwfParamSet(DwfParamOnClose, c_int(0)) # 0 = run, 1 = stop, 2 = shutdown
    
    #Open device
    print("Opening device...")
    dwf.FDwfDeviceOpen(c_int(-1), byref(hdwf))
    
    return



### Functino for disconnecting the analog discovery
def disconnect():
    dwf.FDwfDeviceCloseAll()
    
    return
            
    
    
### Function for generating a sound siganl

def funcGen(shape=funcSine,freq=1.91,Amplitude=1,v_Offset=0):
    """
    

    Parameters
    ----------
    shape : TYPE, optional
        Determines the output signal shape. The default is funcSine.
    freq : TYPE, optional
        Frequency of the signal in MHz. The default is 1.91 MHz.
    Amplitude : TYPE, optional
        Voltage amplitude of the signal. The default is 1V.
    v_Offset : TYPE, optional
        Voltage offset of the signal. The default is 0V.

    Returns
    -------
    None.

    """
    
    #if hdwf.value == hdwfNone.value:
    #    print("failed to open device")
    #    quit()
    
    # 0 = the device will be configured only when calling FDwf###Configure - One can for instance just change the freq and everything else will automatically be configured
    dwf.FDwfDeviceAutoConfigureSet(hdwf, c_int(0))
    
    dwf.FDwfAnalogOutNodeEnableSet(hdwf, channel, AnalogOutNodeCarrier, c_int(1))
    dwf.FDwfAnalogOutNodeFunctionSet(hdwf, channel, AnalogOutNodeCarrier, shape) # Sets the output function
    dwf.FDwfAnalogOutNodeFrequencySet(hdwf, channel, AnalogOutNodeCarrier, c_double(freq*10**6)) # Sets the frequency in Hz i.e. 1000 = 1kHz
    dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, channel, AnalogOutNodeCarrier, c_double(Amplitude)) # Sets the signal amplitude in volts i.e. 1 = 1V
    dwf.FDwfAnalogOutNodeOffsetSet(hdwf, channel, AnalogOutNodeCarrier, c_double(v_Offset)) # Sets the voltage offset
    
    print("Generating sine wave at " + str(freq) + "MHz")
    dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(1)) #This func configures/starts the device with the specified configuration.
    
    return 



###  Function for stopping the sound signal

def funcStop():
    """
    This function stops any signal generated by the Analog discovery 2

    Returns
    -------
    None.

    """
    print("Stopping sine wave...")
    dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(0)) # Stops the sine function
    return

################################################################


#Figure out which frequency sweep to utilize and the clever image analysis 


################################################################

### Function for doing a frequency

def sweep(HzStart, HzStop, shape=funcSine, Amplitude=1, v_Offset=0, HzTime=5):
    
    secSweep = (HzStop-HzStart)/HzTime
    
    
    dwf.FDwfAnalogOutNodeEnableSet(hdwf, channel, AnalogOutNodeCarrier, c_int(1))
    dwf.FDwfAnalogOutNodeFunctionSet(hdwf, channel, AnalogOutNodeCarrier, shape)
    dwf.FDwfAnalogOutNodeFrequencySet(hdwf, channel, AnalogOutNodeCarrier, c_double(HzStop))
    dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, channel, AnalogOutNodeCarrier, c_double(Amplitude))
    dwf.FDwfAnalogOutNodeOffsetSet(hdwf, channel, AnalogOutNodeCarrier, c_double(v_Offset))

    dwf.FDwfAnalogOutRunSet(hdwf, channel, c_double(secSweep)) # Determines for how long it stays at each frequency in seconds
    dwf.FDwfAnalogOutRepeatSet(hdwf, channel, c_int(1)) #Sets the repeat count
    
    return


### Function for generating a frequency sweep

def freqSweep(shape=funcSine,start=1.89,stop=1.93,by=2,Amplitude=1,v_Offset=0):  
    print("sweep test code done")
    # 0 = the device will be configured only when calling FDwf###Configure - One can for instance just change the freq and everything else will automatically be configured
    #dwf.FDwfDeviceAutoConfigureSet(hdwf, c_int(0))
    
    #dwf.FDwfAnalogOutNodeEnableSet(hdwf, channel, AnalogOutNodeCarrier, c_int(1))
    #dwf.FDwfAnalogOutNodeFunctionSet(hdwf, channel, AnalogOutNodeCarrier, shape) # Sets the output function
    #dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, channel, AnalogOutNodeCarrier, c_double(Amplitude)) # Sets the signal amplitude in volts i.e. 1 = 1V
    #dwf.FDwfAnalogOutNodeOffsetSet(hdwf, channel, AnalogOutNodeCarrier, c_double(v_Offset)) # Sets the voltage offset
    
    #frequencies = np.arange(start*10**6, stop*10**6+by*10**3, by*10**3)   # start and stop frequencies in MHz, the step frequency is in kHz
    
    #for i in frequencies:
        #dwf.FDwfAnalogOutNodeFrequencySet(hdwf, channel, AnalogOutNodeCarrier, c_double(i*10**6)) # Sets the frequency in Hz i.e. 1000 = 1kHz  
        #dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(1)) #This func configures/starts the device with the specified configuration.
        #######################################
        
        #Add in some clever image analysis here
        
        #######################################
        #print('Analysis at ' + str(i) + 'MHz is complete. The result is:' + 'Add the result is' + '. Going on to the next frequency...')
        #time.sleep(5) #Generates frequency for 5s and then it goes on to the next frequency
        


    #print("Generating frequency sweep starting at " + str(start) + "MHz" + " and stopping at" + str(stop) + "MHz." + "The frequency step size is: " + str(by))
   
    #return 