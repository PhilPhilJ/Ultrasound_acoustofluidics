#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 12 17:35:47 2023

@author: joakimpihl
"""

##########
# This script contains various functions related to 





import sys
#sys.path.append('C:/Program Files (x86)/Digilent/WaveFormsSDK/samples/py')
sys.path.append('/Applications/WaveForms.app/Contents/Resources/SDK/samples/py')
from ctypes import *
from dwfconstants import *



def AD_Connect():
    # Checks if the system is windows (win) or Mac os (darwin) and then find path to dwf: /Library/Frameworks/dwf.framework/dwf
    if sys.platform.startswith("win"):
        dwf = cdll.dwf
    elif sys.platform.startswith("darwin"): 
        dwf = cdll.LoadLibrary("/Applications/WaveForms.app/Contents/Frameworks/dwf.framework/dwf")

    hdwf = c_int()
    channel = c_int(0)
    
    # Prevent temperature drift - Specifies Analog discovery behavior upon closure of the program
    dwf.FDwfParamSet(DwfParamOnClose, c_int(0)) # 0 = run, 1 = stop, 2 = shutdown
    
    #Open device
    print("Opening first device...")
    dwf.FDwfDeviceOpen(c_int(-1), byref(hdwf))
    
    return
            
    
### Function for generating a sound siganl

def funcGen(shape=funcSine,freq=1.91,Amplitude=1,v_Offset=0):
    """
    

    Parameters
    ----------
    shape : TYPE, optional
        Determines the output signal shape. The default is funcSine.
    freq : TYPE, optional
        Frequency of the signal in MHz. The default is 1.91 MHz.
    Amplitude : TYPE, optional
        Voltage amplitude of the signal. The default is 1V.
    v_Offset : TYPE, optional
        Voltage offset of the signal. The default is 0V.

    Returns
    -------
    None.

    """
    
    #if hdwf.value == hdwfNone.value:
    #    print("failed to open device")
    #    quit()
    
    # 0 = the device will be configured only when calling FDwf###Configure - One can for instance just change the freq and everything else will automatically be configured
    dwf.FDwfDeviceAutoConfigureSet(hdwf, c_int(0))
    
    dwf.FDwfAnalogOutNodeEnableSet(hdwf, channel, AnalogOutNodeCarrier, c_int(1))
    dwf.FDwfAnalogOutNodeFunctionSet(hdwf, channel, AnalogOutNodeCarrier, shape) # Sets the output function
    dwf.FDwfAnalogOutNodeFrequencySet(hdwf, channel, AnalogOutNodeCarrier, c_double(freq*10**6)) # Sets the frequency in Hz i.e. 1000 = 1kHz
    dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, channel, AnalogOutNodeCarrier, c_double(Amplitude)) # Sets the signal amplitude in volts i.e. 1 = 1V
    dwf.FDwfAnalogOutNodeOffsetSet(hdwf, channel, AnalogOutNodeCarrier, c_double(v_Offset)) # Sets the voltage offset
    
    print("Generating sine wave...")
    dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(1)) #This func configures/starts the device with the specified configuration.
    
    return 

###  Function for stopping the sound signal

def funcStop():
    """
    This function stops any signal generated by the Analog discovery 2

    Returns
    -------
    None.

    """
    print("Stopping sine wave...")
    dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(0)) # Stops the sine function
    return



### Function for doing a frequency

def sweep(HzStart, HzStop, HzStep, HzTime=5):
    # Prevent temperature drift - Specifies Analog discovery behavior upon closure of the program
    dwf.FDwfParamSet(DwfParamOnClose, c_int(0)) # 0 = run, 1 = stop, 2 = shutdown
    
    #Open device
    print("Opening first device...")
    dwf.FDwfDeviceOpen(c_int(-1), byref(hdwf))
    
    if HzStep == 0:
        Freq = 
    
    
    return